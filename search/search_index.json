{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to HSKY WRLD Documentation","text":"<p>HSKY WRLD is my personal space dedicated to the exploration and organization of thoughts, techniques, and insights, with a primary focus on the realms of cybersecurity. Here, you'll find a structured collection of knowledge designed to guide you through the intricacies of securing digital environments, mastering cybersecurity practices, and staying updated on the latest trends. Beyond the technical aspects, HSKY WRLD also strives to extend its reach into personal development, offering life guidance and strategies to enhance your overall well-being.</p>"},{"location":"#embracing-collective-wisdom","title":"Embracing Collective Wisdom","text":"<p>In the pursuit of knowledge, I recognize that no one person holds all the answers. The content presented in HSKY WRLD is a culmination of insights gathered throughout my continuous journey, drawing from various sources and experiences. This documentation aims to provide a comprehensive and well-organized resource, reflecting not just my individual perspective but the collective wisdom of the cybersecurity community.</p>"},{"location":"#who-am-i","title":"Who Am I?","text":"<p>Hello, I'm Diego Borghgraef, a 25-year-old cybersecurity enthusiast currently working at EY. My professional journey involves Red Teaming, Blue Teaming (Attack/Defense), and governance. I thrive on expanding my knowledge in these areas, always eager to delve deeper into the intricacies of cybersecurity.</p> <p>On a personal level, I'm a devoted fan of sports and structured living. Each day, I strive to become a better version of myself, even if the changes are subtle. This blog is a testament to my mission of continuous improvement. In addition to my passion for cybersecurity, I find joy in various sports activities, including fitness, running, swimming, and biking.</p> <p>As for hobbies, one of my current interests is FPV drones\u2014small, agile, First Person View aircraft. Flying these drones provides me with a sense of freedom, akin to soaring through the skies like a bird.</p>"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/","title":"Nmap Host Discovery Commands","text":"<p>You have learned how ARP, ICMP, TCP, and UDP can detect live hosts by completing this room. Any response from a host is an indication that it is online. Below is a quick summary of the command-line options for Nmap that we have covered.</p>"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#scan-types-and-example-commands","title":"Scan Types and Example Commands","text":"Scan Type Example Command ARP Scan <code>sudo nmap -PR -sn MACHINE_IP/24</code> ICMP Echo Scan <code>sudo nmap -PE -sn MACHINE_IP/24</code> ICMP Timestamp Scan <code>sudo nmap -PP -sn MACHINE_IP/24</code> ICMP Address Mask Scan <code>sudo nmap -PM -sn MACHINE_IP/24</code> TCP SYN Ping Scan <code>sudo nmap -PS22,80,443 -sn MACHINE_IP/30</code> TCP ACK Ping Scan <code>sudo nmap -PA22,80,443 -sn MACHINE_IP/30</code> UDP Ping Scan <code>sudo nmap -PU53,161,162 -sn MACHINE_IP/30</code> <p>Remember to add <code>-sn</code> if you are only interested in host discovery without port-scanning. Omitting <code>-sn</code> will let Nmap default to port-scanning the live hosts.</p>"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#nmap-options","title":"Nmap Options","text":"Option Purpose -n No DNS lookup -R Reverse-DNS lookup for all hosts -sn Host discovery only <p>Ensure you have taken note of all the Nmap options explained in this room. To continue learning about Nmap, please join the room Nmap Basic Port Scans, which introduces the basic types of port scans.</p>"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#nmap-scans-and-port-discovery-commands","title":"Nmap Scans and Port Discovery Commands","text":""},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#host-discovery-scans","title":"Host Discovery Scans","text":"<p>You have learned how ARP, ICMP, TCP, and UDP can detect live hosts. Now, let's explore three types of port scans to discover running TCP and UDP services on a target host.</p>"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#port-scan-types-and-example-commands","title":"Port Scan Types and Example Commands","text":"Port Scan Type Example Command TCP Connect Scan <code>nmap -sT MACHINE_IP</code> TCP SYN Scan <code>sudo nmap -sS MACHINE_IP</code> UDP Scan <code>sudo nmap -sU MACHINE_IP</code> <p>These scan types should get you started in discovering running TCP and UDP services on a target host.</p>"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#nmap-port-scan-options","title":"Nmap Port Scan Options","text":"Option Purpose -p- Scan all ports -p1-1023 Scan ports 1 to 1023 -F Scan the 100 most common ports -r Scan ports in consecutive order -T&lt;0-5&gt; -T0 being the slowest and T5 the fastest --max-rate 50 Set the rate to &lt;= 50 packets/sec --min-rate 15 Set the rate to &gt;= 15 packets/sec --min-parallelism 100 Set at least 100 probes in parallel <p>Ensure you understand these options for effective Nmap scanning. To continue learning about Nmap, consider joining the room \"Nmap Basic Port Scans,\" which introduces the basic types of port scans.</p>"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#nmap-advanced-port-scans","title":"Nmap Advanced Port Scans","text":""},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#port-scan-types-and-example-commands_1","title":"Port Scan Types and Example Commands","text":"Port Scan Type Example Command TCP Null Scan <code>sudo nmap -sN MACHINE_IP</code> TCP FIN Scan <code>sudo nmap -sF MACHINE_IP</code> TCP Xmas Scan <code>sudo nmap -sX MACHINE_IP</code> TCP Maimon Scan <code>sudo nmap -sM MACHINE_IP</code> TCP ACK Scan <code>sudo nmap -sA MACHINE_IP</code> TCP Window Scan <code>sudo nmap -sW MACHINE_IP</code> Custom TCP Scan <code>sudo nmap --scanflags URGACKPSHRSTSYNFIN MACHINE_IP</code> Spoofed Source IP <code>sudo nmap -S SPOOFED_IP MACHINE_IP</code> Spoofed MAC Address <code>sudo nmap --spoof-mac SPOOFED_MAC MACHINE_IP</code> Decoy Scan <code>nmap -D DECOY_IP,ME MACHINE_IP</code> Idle (Zombie) Scan <code>sudo nmap -sI ZOMBIE_IP MACHINE_IP</code> Fragment IP (8 bytes) <code>nmap -f MACHINE_IP</code> Fragment IP (16 bytes) <code>nmap -ff MACHINE_IP</code> <p>These scan types rely on setting TCP flags in unexpected ways to prompt ports for a reply. Null, FIN, and Xmas scans provoke a response from closed ports, while Maimon, ACK, and Window scans provoke a response from open and closed ports.</p>"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#nmap-options_1","title":"Nmap Options","text":"Option Purpose --source-port PORT_NUM Specify source port number --data-length NUM Append random data to reach given length --reason Explain how Nmap made its conclusion -v Verbose -vv Very verbose -d Debugging -dd More details for debugging"},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#nmap-post-port-scans","title":"Nmap Post Port Scans","text":""},{"location":"Courses/Jr%20Penetration%20Tester/Network%20Security/nmap/#option-meanings","title":"Option Meanings","text":"Option Meaning -sV Determine service/version info on open ports -sV --version-light Try the most likely probes (2) -sV --version-all Try all available probes (9) -O Detect the operating system --traceroute Run traceroute to the target --script=SCRIPTS Nmap scripts to run -sC or --script=default Run default scripts -A Equivalent to -sV -O -sC --traceroute -oN Save output in normal format -oG Save output in grepable format -oX Save output in XML format -oA Save output in normal, XML, and Grepable formats <p>These options are used after conducting port scans to gather additional information, such as service/version details, operating system detection, traceroute results, and the execution of Nmap scripts for more advanced analysis.</p>"},{"location":"Github/Github%20push/","title":"GitHub Push","text":"<p>This document provides a step-by-step guide on how to push changes to your GitHub repository.</p>"},{"location":"Github/Github%20push/#steps","title":"Steps","text":""},{"location":"Github/Github%20push/#1-make-changes-to-your-files","title":"1. Make Changes to Your Files","text":"<p>Make the necessary changes to your files. This can include modifying existing files, adding new files, or deleting files.</p>"},{"location":"Github/Github%20push/#2-stage-the-changes","title":"2. Stage the Changes","text":"<p>Use the following command to stage the changes you've made. Staging prepares the changes for a commit.</p> <pre><code>git add .\n</code></pre> <p>This command adds all the changes in the current directory to the staging area. If you want to stage specific files, replace . with the file names.</p>"},{"location":"Github/Github%20push/#3-commit-the-changes","title":"3. Commit the Changes","text":"<p>Commit the staged changes with a descriptive message using the following command:</p> <pre><code>git commit -m \"Describe the changes made in this commit\"\n</code></pre>"},{"location":"Github/Github%20push/#4-push-the-changes-to-github","title":"4. Push the Changes to GitHub","text":"<p>Finally, push the committed changes to your GitHub repository using the following command:</p> <pre><code>git push -u origin\n</code></pre> <p>This command sends your committed changes to the remote repository on GitHub. If this is your first push or if you're pushing to a new branch, you might need to specify the branch name (e.g., git push origin main).</p> <p>Now, your changes are reflected in your GitHub repository.</p>"},{"location":"Python/python/","title":"Installing python","text":"","tags":["python","python pentesting","scripting"]},{"location":"Python/python/#installing-python-38-on-ubuntu-20045","title":"Installing python 3.8 on Ubuntu 20.04.5","text":"<p>First, update and upgrade:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre> <p>Add PPA for Python old versions. The old versions of Python such as 3.9, 3.8, 3.7, and older are not available to install using the default system repository of Ubuntu 22.04 LTS Jammy JellyFish or 20.04 Focal Fossa. Hence, we need to add a PPA offered by the \u201cdeadsnakes\u201d team to get the old archived Python versions easily.</p> <pre><code>sudo apt install software-properties-common\n</code></pre> <pre><code>sudo add-apt-repository ppa:deadsnakes/ppa\n</code></pre> <p>Check python versions you want. Syntax:</p> <pre><code>sudo apt-cache policy python&lt;version&gt;\n</code></pre> <p>In my case:</p> <pre><code>sudo apt-cache policy python3.9\n</code></pre> <p>Install the version you want:</p> <pre><code>sudo apt install python3.9\n</code></pre> <p>Set up a default version in your system:</p> <pre><code># Checkout existing versions\nls /usr/bin/python*\n\n# Also, let's check out  whether any version is configured as python alternatives or not. For that run:\nsudo update-alternatives --list python\n\n# If the output is: \u201cupdate-alternatives: error: no alternatives for python\u201d. Then it means there are no alternatives that have been configured, hence let\u2019s do some:\nsudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1\nsudo update-alternatives --install /usr/bin/python python /usr/bin/python3.10 2\nsudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 3\n\n# Switch the default Python version \nsudo update-alternatives --config python\n</code></pre>","tags":["python","python pentesting","scripting"]},{"location":"Python/python/#other-methods","title":"Other methods","text":"","tags":["python","python pentesting","scripting"]},{"location":"Python/python/#installing-pip","title":"Installing pip","text":"<pre><code>python3 -m pip install pip\n</code></pre> <p>If you get error: externally-managed-environment, then the solution is create an environment. As the message explains, this is actually not an issue with Python itself, but rather your Linux distribution (Kali, Debian, etc.) implementing a deliberate policy to ensure you don't break your operating system and system packages by using <code>pip</code> (or Poetry, Hatch, PDM or another non-OS package manager) outside the protection of a virtual environment.</p>","tags":["python","python pentesting","scripting"]},{"location":"Python/python/#creating-a-virtual-environment-with-venv","title":"Creating a virtual environment with venv","text":"<pre><code>python3 -m venv &lt;DIR&gt;\nsource &lt;DIR&gt;/bin/activate\n</code></pre> <p>Now you can activate or deactivate the virtual environment with:</p> <pre><code>&lt;DIR&gt;\\Scripts\\activate\n</code></pre>","tags":["python","python pentesting","scripting"]},{"location":"Python/python/#creating-a-virtual-environment-with-mkvirtualenv","title":"Creating a virtual environment with mkvirtualenv","text":"<pre><code>mkvirtualenv nameOfEnv\n</code></pre>","tags":["python","python pentesting","scripting"]}]}